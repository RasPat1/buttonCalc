/**
 *Button Calc  by Rasesh Patel
 *
 *This calculator has buttons on it.  Thereby forcibly limiting the 
 *inputs available to the user in contrast to the program simpleCalc.
 *This reduces the number of scenarios that need to be 'caught' for 
 *force close protection.  
 *
 *		---- Bugs ----
 *Resolved 9-10-12
 *If user clicks one operator and followed by another operator user
 *	expects operator last hit to be in use.
 *
 *In general there is a problem with the program logic.  It does not correlate
 *	well to how what the user sees.  I have trouble describing this in words
 *	but each time i try to adjust the code the unintuitive nature of this code
 *	implementation becomes apparent.
 *
 *		---- Poor Implementations ----
 *FIGURE OUT HOW TO USE STATIC VARIABLES PROPLERLY! i'm nearly certain
 *	that this can be and should be done without using static variables.  
 *	the only problem is that you never quite figured out how to do it right.
 *	learn.
 *The buttons each have their own method.  Tons of repetition.. Disgusting
 *Can I use Enums anywhere here to clean up the code?
 *identical code written in each method for operators... Fickle
 *UI does not fill screen
 *Names of the variables suck... Really change them.  Like now.
 *Did not install proper debug procedures.  Next time use Logcat
 *	and for god sakes figure out how to use the step functions, breakpoints, and 
 *	variable and expression monitors you idiot!
 *		
 *
 *		---- Questions ----
 *
 *Where are the potential error points?
 *		turning from a string to an integer 
 *		Float.ValueOf(String input)
 *
 *		Trying to do operations (+,-,*,'/')math with misbehaving Floats
 *
 *		handling behavior that allows user to use current output as input
 *		for next operation.
 *
 *Solution for both problems:
 *		Originally used .isNaN to stop any misbehaved numbers from being used in 
 *		the math section however this still required them to be converted into floats.
 *		Instead, manually check each character of the string to ensure that only
 *		digits and a decimal are present before converting into a float.
 *		This is the same check that was necessary for SimpleCalc...
 *
 *		Also by checking the validity of the number before operating on them we exclude
 *		force closes resulting from impossible operations.
 *
 *		---- Analysis ----
 *		Similar checking of the input strings are required in both SimpleCalc and ButtonCalc
 *		  How can we avoid this inelegant step?  Implement solution in next iteration.  
 *		  Since poor numbers can only be created by adding multiple decimals add 
 *		  field containsDecimal.  This solution forces checking of the string each time 
 *		  the decimal key is hit and only when the decimal key is hit.  
 *		Possible implementation option is have the textfield really be the place where you get the values form
 *		  afterall it is what the user thinks is happening coding it like this will be more readable and lifelike
 *		  basically when performing any operations the program would take the value on the screen as one of the operands
 *		  the check for validity would be done at the button press before updating to the screen and notify the user then
 *		
 *
 *		---- Revisions ----
 *		General
 *		-General Polish
 *		-Home Screen Icon
 *		-Menu buttons with About page at the very least
 *		Update UI
 *		-Add landscape feature
 *		-Implement multiple screen compatibility
 *		-Full screen pad of buttons
 *		-Adjust layout and button sizes to be more natural and realistic
 *		-Tones and textures
 *		Features
 *		-Memory, Clear, Clear memory
 *		-Styling options?
 *		Mathematics
 *		-properly implement rounding methods rather than using defaults from ValueOf
 *		-negative numbers
 *		-Operations
 *		-Graphing
 *		-Etcetera
 *
 *		-- Explorations --
 *		Post Fix and Prefix calculators why they arose and how they are coded..
 *			Are these answers related?
 *		Typical calculator designs.   Multi-paradigm
 *		-What generalizations can be made about the language based on the necessary 
 *			structure of the calculators?
 *		WTF is an ENUM and how can i use it to DRY the code?
 *		
 *		---- Tips ----
 *		Try to develop more incrementally
 *		Standardize your comment formatting.  Use Javadoc notation for each method properly
 *
 *		---Notes-----
 *		Started using Git with this Application to test out and learn Git.  9-9-12 5:51AM
 */